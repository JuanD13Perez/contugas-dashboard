from dash import dcc, html, Input, Output
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Cargar datasets
df_combinado = pd.read_csv("data/predicted_with_anomalies.csv", parse_dates=["Fecha"])
df_errores = pd.read_csv("data/Errores.csv")
df_resultados = pd.read_csv("data/Resultados_Modelos.csv")

# Variables disponibles
variables = ["Presion", "Temperatura", "Volumen"]
clientes = df_combinado["Client_ID"].unique()

def layout2():
    return html.Div([
        # Panel de filtros
        html.Div([
            html.H4("Filtros", style={
                'textAlign': 'center',
                'color': 'white',
                'margin-bottom': '20px',
                'font-weight': 'bold'
            }),
            dbc.Row([
                # Cliente
                dbc.Col(html.Div([
                    html.Small("Seleccione un cliente", style={'color': 'white'}),
                    dcc.Dropdown(
                        id='filtro-cliente',
                        options=[{'label': c, 'value': c} for c in clientes],
                        value=clientes[0],
                        placeholder='Seleccionar Cliente'
                    )
                ], style={'textAlign': 'center'})),
                # Variable
                dbc.Col(html.Div([
                    html.Small("Seleccione una variable", style={'color': 'white'}),
                    dcc.Dropdown(
                        id='filtro-variable',
                        options=[{'label': v, 'value': v} for v in variables],
                        value='Presion',
                        placeholder='Seleccionar Variable'
                    )
                ], style={'textAlign': 'center'})),
                # Fecha
                dbc.Col(html.Div([
                    html.Small("Seleccione un rango de fechas", style={'color': '#white','margin-bottom': '4px'}),
                    dcc.DatePickerRange(
                        id='filtro-fecha',
                        start_date=df_combinado["Fecha"].min(),
                        end_date=df_combinado["Fecha"].max(),
                        display_format='YYYY-MM-DD'
                    )
                ], style={'display': 'flex', 'flexDirection': 'column','alignItems': 'center'}))
            ], style={'width': '100%'})
        ], style={
            'background-color': '#a0dff7',
            'border-radius': '10px',
            'padding': '20px',
            'margin-bottom': '20px',
            'box-shadow': '0 0 15px rgba(0, 0, 0, 0.2)'
        }),

        # Gráfica principal
        html.Div([
            dcc.Graph(id='grafica-linea-tiempo')
        ], style={'margin-bottom': '20px'}),

        # Métricas
        html.Div([
            html.H4("Métricas", style={'textAlign': 'center', 'margin-bottom': '20px'}),
            dbc.Row([
                *[dbc.Col(html.Div([
                    html.H6(label, style={'textAlign': 'center'}),
                    html.P(id=metric_id, style={'textAlign': 'center', 'font-size': '18px'})
                ], style={'background-color': '#f8f9fa', 'border': '1px solid black', 'padding': '10px'}))
                for label, metric_id in [
                    ("RMSE", "rmse-metrica"),
                    ("MAE", "mae-metrica"),
                    ("Anomalías Filtro", "anomalias-filtro"),
                    ("Anomalías Históricas", "anomalias-historicas"),
                    ("Coincidencias", "coincidencias"),
                    ("Coincidencias %", "coincidencias-porcentaje")
                ]]
            ])
        ], style={'margin-bottom': '20px'}),

        # Análisis de anomalías
        html.Div([
            dbc.Row([
                dbc.Col(dcc.Graph(id='histograma-scores'), width=6),
                dbc.Col(html.Div([
                    html.H6("¿Qué hace este modelo?", style={'textAlign': 'center'}),
                    html.P("El modelo Isolation Forest detecta anomalías en los datos identificando puntos que se desvían significativamente del comportamiento normal.",
                           style={'textAlign': 'justify'})
                ]), width=6)
            ])
        ], style={'margin-bottom': '20px'})
    ], style={'background': 'linear-gradient(to bottom, #6ac8e0, #d4f1f9)', 'padding': '20px'})


def register_callbacks_layout2(app):
    @app.callback(
        [
            Output('grafica-linea-tiempo', 'figure'),
            Output('rmse-metrica', 'children'),
            Output('mae-metrica', 'children'),
            Output('anomalias-filtro', 'children'),
            Output('anomalias-historicas', 'children'),
            Output('coincidencias', 'children'),
            Output('coincidencias-porcentaje', 'children'),
            Output('histograma-scores', 'figure'),
        ],
        [
            Input('filtro-cliente', 'value'),
            Input('filtro-variable', 'value'),
            Input('filtro-fecha', 'start_date'),
            Input('filtro-fecha', 'end_date')
        ]
    )
    def actualizar_graficos(cliente, variable, start_date, end_date):
        df_cliente = df_combinado[
            (df_combinado["Client_ID"] == cliente) &
            (df_combinado["Fecha"] >= start_date) &
            (df_combinado["Fecha"] <= end_date)
        ]

        # Gráfica de línea
        fig_linea = go.Figure()
        fig_linea.add_trace(go.Scatter(
            x=df_cliente["Fecha"], y=df_cliente[f"{variable}_actual"],
            mode='lines', name='Actual', line=dict(color='#1f77b4')
        ))
        fig_linea.add_trace(go.Scatter(
            x=df_cliente["Fecha"], y=df_cliente[f"{variable}_predicho"],
            mode='lines', name='Predicho', line=dict(color='#ff7f0e')
        ))
        fig_linea.add_trace(go.Scatter(
            x=df_cliente[df_cliente["Anomaly"] == -1]["Fecha"],
            y=df_cliente[df_cliente["Anomaly"] == -1][f"{variable}_actual"],
            mode='markers', name='Anomalía', marker=dict(color='red', symbol='x')
        ))
        fig_linea.update_layout(title=f"Línea de Tiempo para {cliente} - {variable}")

        # Métricas
        rmse = df_errores[(df_errores["Client_ID"] == cliente) & (df_errores["Variable"] == variable)]["RMSE"].values[0]
        mae = df_errores[(df_errores["Client_ID"] == cliente) & (df_errores["Variable"] == variable)]["MAE"].values[0]
        anomalías_filtro = len(df_cliente[df_cliente["Anomaly"] == -1])
        anomalías_historicas = len(df_combinado[(df_combinado["Client_ID"] == cliente) & (df_combinado["Anomaly"] == -1)])
        coincidencias = df_resultados[df_resultados["Client_ID"] == cliente]["Coincidencias con LSTM (cualquier variable)"].values[0]
        coincidencias_porcentaje = df_resultados[df_resultados["Client_ID"] == cliente]["% Coincidencia"].values[0]

        # Histograma de scores
        fig_scores = px.histogram(df_cliente, x="Score", nbins=50, title=f"Distribución de Scores para {cliente}", color_discrete_sequence=["#FFA500"])
        fig_scores.add_vline(x=df_cliente["Score"].mean(), line_dash="dash", line_color="blue", annotation_text="Media")
        fig_scores.add_vline(x=df_cliente["Score"].quantile(0.25), line_dash="dot", line_color="green", annotation_text="Q1")
        fig_scores.add_vline(x=df_cliente["Score"].quantile(0.75), line_dash="dot", line_color="green", annotation_text="Q3")

        return fig_linea, f"{rmse:.2f}", f"{mae:.2f}", anomalías_filtro, anomalías_historicas, coincidencias, f"{coincidencias_porcentaje:.2f}%", fig_scores
